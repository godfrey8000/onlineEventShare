// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  CHATTER
  EDITOR
  ADMIN
}

model Map {
  id            Int       @id @default(autoincrement())
  name          String
  level         Int
  episode       Episode   @relation(fields: [episodeNumber], references: [episodeId]) // ✅ Relation field
  episodeNumber Int // ✅ Scalar field (foreign key)
  trackers      Tracker[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // ✅ new relation to favorites
  favorites MapFavorite[]
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int           @id @default(autoincrement())
  username  String        @unique
  password  String
  nickname  String?
  role      Role          @default(VIEWER)
  createdAt DateTime      @default(now())
  trackers  Tracker[]
  favorites MapFavorite[]
  messages  ChatMessage[]
}

model MapFavorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  map       Map      @relation(fields: [mapId], references: [id])
  mapId     Int
  createdAt DateTime @default(now())

  @@unique([userId, mapId]) // no duplicate favorite per user
}

model Episode {
  id        Int       @id @default(autoincrement())
  episodeId Int       @unique
  name      String
  maps      Map[]
  trackers  Tracker[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tracker {
  id        Int      @id @default(autoincrement())
  episodeId Int
  mapId     Int
  userId    Int?
  channelId Int
  level     Int?
  status    Decimal  @default(0)
  nickname  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  map     Map     @relation(fields: [mapId], references: [id])
  episode Episode @relation(fields: [episodeId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model Channel {
  id   Int    @id @default(autoincrement())
  name String
}
